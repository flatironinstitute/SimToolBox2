#ifndef PARTICLESYSTEM_HPP_
#define PARTICLESYSTEM_HPP_

#include "Particle/Particle.hpp"
#include "SystemConfig.hpp"

#include "Boundary/Boundary.hpp"
#include "Constraint/ConstraintBlock.hpp"
#include "Constraint/ConstraintSolver.hpp"
#include "Trilinos/TpetraUtil.hpp"
#include "Util/EigenDef.hpp"
#include "Util/TRngPool.hpp"

#include <msgpack.hpp>

#include <array>
#include <unordered_map>
#include <utility>

template <class ParticleBase>
class ParticleSystem {
private:
  std::vector<ParticleBase> particles;
  bool enableTimer = false;
  long snapID;    ///< the current id of the snapshot file to be saved.
  long stepCount; ///< timestep Count. sequentially numbered from 0

  // Constraint stuff
  ///< pointer to ConstraintSolver
  std::shared_ptr<ConstraintSolver> conSolverPtr;
  std::shared_ptr<ConstraintCollector>
      conCollectorPtr;                   ///<  pointer to ConstraintCollector
  Teuchos::RCP<const TV> forceUniRcp;    ///< unilateral constraint force
  Teuchos::RCP<const TV> velocityUniRcp; ///< unilateral constraint velocity
  Teuchos::RCP<const TV> forceBiRcp;     ///< bilateral constraint force
  Teuchos::RCP<const TV> velocityBiRcp;  ///< bilateral constraint velocity

  // computed without knowledge of constraints
  Teuchos::RCP<TV>
      forcePartNonBrownRcp; ///< force specified by setForceNonBrown()
  Teuchos::RCP<TV>
      velocityPartNonBrownRcp; ///< velocity specified by setVelocityNonBrown()
  Teuchos::RCP<TV>
      velocityNonBrownRcp; ///< \f$V_{NonBrown} = V_{part,NonBrown}+M
                           ///< F_{part,NonBrown}\f$
  Teuchos::RCP<TV>
      velocityBrownRcp; ///< Brownian velocity, generated by calcBrown()
  Teuchos::RCP<TV> velocityNonConRcp; ///< \f$V_{nc} = V_{Brown}+V_{NonBrown}\f$

  // MPI stuff
  std::shared_ptr<TRngPool>
      rngPoolPtr; ///< TRngPool object for thread-safe random number generation
  Teuchos::RCP<const TCOMM>
      commRcp; ///< TCOMM, set as a Teuchos::MpiComm object in constrctor
  Teuchos::RCP<TMAP> sylinderMapRcp; ///< TMAP, contiguous and sequentially
                                     ///< ordered 1 dof per sylinder
  Teuchos::RCP<TMAP>
      sylinderMobilityMapRcp; ///< TMAP, contiguous and sequentially ordered 6
                              ///< dofs per sylinder
  Teuchos::RCP<TCMAT> mobilityMatrixRcp; ///< block-diagonal mobility matrix
  Teuchos::RCP<TOP> mobilityOperatorRcp; ///< full mobility operator
                                         ///< (matrix-free), to be implemented

  // Data directory
  std::shared_ptr<ZDD<SylinderNearEP>>
      sylinderNearDataDirectoryPtr; ///< distributed data directory for sylinder
                                    ///< data

public:
  ParticleSystem() = default;
  ~ParticleSystem() = default;

  ParticleSystem(const ParticleSystem &) = delete;
  ParticleSystem(ParticleSystem &&) = delete;
  ParticleSystem &operator=(const ParticleSystem &) = delete;
  ParticleSystem &operator=(ParticleSystem &&) = delete;
};

#endif